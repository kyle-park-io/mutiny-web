// IMPORTANT: this should match 1:1 with the MutinyJsError enum in mutiny-wasm
// If we can handle all of these, we can handle all the errors that Mutiny can throw

// WARNING: autogenerated code, generated by calling:
// `node scripts/errorsToTs.cjs /path/to/mutiny-wasm/src/error.rs`
type MutinyError =
    | "Mutiny is already running."
    | "Mutiny is not running."
    | "Incorrect expected network."
    | "Resource Not found."
    | "Funding transaction could not be created."
    | "Network connection closed."
    | "The invoice or address is on a different network."
    | "An invoice must not get payed twice."
    | "Payment timed out."
    | "The given invoice is invalid."
    | "The given invoice is expired."
    | "Failed to create invoice."
    | "Channel reserve amount is too high."
    | "We do not have enough balance to pay the given amount."
    | "Failed to call on the given LNURL."
    | "Failed to make a request to the LSP."
    | "Failed to request channel from LSP due to funding error."
    | "Failed to request channel from LSP due to amount being too high."
    | "Failed to have a connection to the LSP node."
    | "Failed to provide an invoice to the LSP."
    | "Subscription Client Not Configured"
    | "Invalid Parameter"
    | "Called incorrect lnurl function."
    | "Failed to find route."
    | "Failed to parse the given peer information."
    | "Failed to create channel."
    | "Failed to close channel."
    | "Failed to persist data."
    | "Failed to read data from storage."
    | "Failed to decode lightning data."
    | "Failed to generate seed"
    | "Invalid mnemonic"
    | "Failed to conduct wallet operation."
    | "Failed to sign given transaction."
    | "Failed to conduct chain access operation."
    | "Failed to to sync on-chain wallet."
    | "Failed to execute a rapid gossip sync function"
    | "Failed to read or write json from the front end"
    | "The given node pubkey is invalid."
    | "Failed to get nostr data."
    | "Error with NIP-07 extension"
    | "Failed to get the bitcoin price."
    | "Satoshi amount is invalid"
    | "Failed to execute a dlc function"
    | "Failed to execute a wasm_bindgen function"
    | "Invalid Arguments were given"
    | "Incorrect password entered."
    | "Cannot change password to the same password."
    | "Failed to create payjoin request."
    | "Payjoin response error: {0}"
    | "Payjoin configuration failed."
    | "Error calling Cashu Mint"
    | "Mint URL in token is empty"
    | "Token has been already spent."
    | "A federation is required"
    | "Failed to connect to a federation."
    | "Unknown Error";

export function matchError(e: unknown): Error {
    let errorString;

    if (e instanceof Error) {
        errorString = e.message;
    } else if (typeof e === "string") {
        errorString = e;
    } else {
        errorString = "Unknown error";
    }

    // 지갑 코드 추출을 위해 네트워크 에러 자동 처리 비활성화
    const networkErrors = [
        "Network connection closed.",
        "Failed to make a request to the LSP.",
        "Failed to request channel from LSP due to funding error.",
        "Failed to have a connection to the LSP node.",
        "Failed to call on the given LNURL.",
        "Failed to connect to a federation.",
        "Resource Not found.",
        "fetch",
        "Failed to fetch",
        "ERR_NETWORK",
        "ERR_INTERNET_DISCONNECTED"
    ];

    const isNetworkError = networkErrors.some((netErr) =>
        errorString.toLowerCase().includes(netErr.toLowerCase())
    );

    if (isNetworkError) {
        console.warn("네트워크 에러 감지 (자동 처리 비활성화됨):", errorString);
        // 네트워크 에러도 그대로 전달 - 자동 처리 비활성화
        return new Error(errorString);
    }

    // 지갑 코드 추출을 위해 모든 에러 처리 자동화 비활성화
    switch (errorString as MutinyError) {
        case "Failed to make a request to the LSP.":
        case "Failed to request channel from LSP due to funding error.":
        case "Failed to have a connection to the LSP node.":
            console.warn("LSP 에러 발생 (자동 처리 비활성화됨):", errorString);
            return new Error(errorString);
        case "Failed to call on the given LNURL.":
            console.warn(
                "LNURL 에러 발생 (자동 처리 비활성화됨):",
                errorString
            );
            return new Error(errorString);
        case "Failed to connect to a federation.":
            console.warn(
                "Federation 연결 에러 (자동 처리 비활성화됨):",
                errorString
            );
            return new Error(errorString);
    }

    // 기타 에러도 콘솔에 로깅 (자동 처리 비활성화됨)
    console.warn("일반 에러 (자동 처리 비활성화됨):", errorString);
    return new Error(errorString);
}

// 전역 에러 핸들러 추가 - 처리되지 않은 에러들을 조용히 처리
export function setupGlobalErrorHandling() {
    // 에러 핸들링 비활성화 - 지갑 코드 추출을 위해
    console.log("전역 에러 핸들링이 비활성화되었습니다 - 지갑 코드 추출 모드");

    // Promise rejection 처리 - 콘솔 로깅만 하고 방지하지 않음 (브라우저 환경에서만)
    if (typeof window !== "undefined") {
        window.addEventListener("unhandledrejection", (event) => {
            console.warn("처리되지 않은 Promise rejection:", event.reason);
            // event.preventDefault() 제거 - 기본 에러 동작 허용
        });

        // 일반 에러 처리 - 콘솔 로깅만 하고 방지하지 않음
        window.addEventListener("error", (event) => {
            console.warn("전역 에러:", event.error || event.message);
            // event.preventDefault() 제거 - 기본 에러 동작 허용
        });
    }
}
